import groovy.json.JsonSlurperClassic

node {
    def BUILD_NUMBER = env.BUILD_NUMBER
    def RUN_ARTIFACT_DIR = "tests/${BUILD_NUMBER}"
    def SFDC_USERNAME


    def HUB_ORG = env.HUB_ORG_DH
    def SFDC_HOST = env.SFDC_HOST_DH
    def JWT_KEY_CRED_ID = env.JWT_CRED_ID_DH
    def CONNECTED_APP_CONSUMER_KEY = env.CONNECTED_APP_CONSUMER_KEY_DH

    println 'KEY IS'
    println JWT_KEY_CRED_ID
    println HUB_ORG
    println SFDC_HOST
    println CONNECTED_APP_CONSUMER_KEY

    def toolbelt = "C:/Program Files/sf/bin/sfdx.cmd"


    stage('Checkout Source') {
        checkout scm
    }

withCredentials([file(credentialsId: JWT_KEY_CRED_ID, variable: 'jwt_key_file')]) {
    stage('Deploy Code') {
        def rc
        
        if (isUnix()) {
            sh "echo 'Checking sfdx location: ${toolbelt}/bin/sfdx'"
            sh "ls -la ${toolbelt}/bin"
            rc = sh returnStatus: true, script: "${toolbelt}/bin/sfdx force:auth:jwt:grant --clientid ${CONNECTED_APP_CONSUMER_KEY} --username ${HUB_ORG} --jwtkeyfile ${jwt_key_file} --setdefaultdevhubusername --instanceurl ${SFDC_HOST}"
        } else {
            bat "echo Checking sfdx location: \"${toolbelt}\\bin\\sfdx\""
            bat "dir \"${toolbelt}\\bin\""
            rc = bat returnStatus: true, script: "\"${toolbelt}\\bin\\sfdx\" force:auth:jwt:grant --clientid ${CONNECTED_APP_CONSUMER_KEY} --username ${HUB_ORG} --jwtkeyfile \"${jwt_key_file}\" --setdefaultdevhubusername --instanceurl ${SFDC_HOST}"
        }

        if (rc != 0) { error 'Hub org authorization failed' }

        println "Authorization successful, proceeding with deployment."
    }
}

}
